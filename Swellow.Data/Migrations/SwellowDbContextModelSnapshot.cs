// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swellow;

namespace Swellow.Data.Migrations
{
    [DbContext(typeof(SwellowDbContext))]
    partial class SwellowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Swellow.Data.SqlModel.Episode.EpisodeMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdMovie")
                        .HasColumnType("int");

                    b.Property<string>("NoEpisode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Propertys")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdMovie");

                    b.ToTable("EpisodeMovie");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Episode.EpisodeTv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdTv")
                        .HasColumnType("int");

                    b.Property<string>("NoEpisode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoSeason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Propertys")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdTv");

                    b.ToTable("EpisodeTv");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.LocalFile.PathDirectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdLibrary")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdLibrary");

                    b.ToTable("PathDirectory");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoActor", b =>
                {
                    b.Property<int>("IdVideo")
                        .HasColumnType("int");

                    b.Property<int>("IdCast")
                        .HasColumnType("int");

                    b.HasKey("IdVideo", "IdCast");

                    b.HasIndex("IdCast");

                    b.ToTable("VideoActors");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoDirector", b =>
                {
                    b.Property<int>("IdVideo")
                        .HasColumnType("int");

                    b.Property<int>("IdCast")
                        .HasColumnType("int");

                    b.HasKey("IdVideo", "IdCast");

                    b.HasIndex("IdCast");

                    b.ToTable("VideoDirectors");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoGenre", b =>
                {
                    b.Property<int>("IdVideo")
                        .HasColumnType("int");

                    b.Property<int>("IdGenre")
                        .HasColumnType("int");

                    b.HasKey("IdVideo", "IdGenre");

                    b.HasIndex("IdGenre");

                    b.ToTable("VideoGenres");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoPublisher", b =>
                {
                    b.Property<int>("IdVideo")
                        .HasColumnType("int");

                    b.Property<int>("IdPublisher")
                        .HasColumnType("int");

                    b.HasKey("IdVideo", "IdPublisher");

                    b.HasIndex("IdPublisher");

                    b.ToTable("VideoPublishers");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoStudio", b =>
                {
                    b.Property<int>("IdVideo")
                        .HasColumnType("int");

                    b.Property<int>("IdStudio")
                        .HasColumnType("int");

                    b.HasKey("IdVideo", "IdStudio");

                    b.HasIndex("IdStudio");

                    b.ToTable("VideoStudios");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoTag", b =>
                {
                    b.Property<int>("IdVideo")
                        .HasColumnType("int");

                    b.Property<int>("IdTag")
                        .HasColumnType("int");

                    b.HasKey("IdVideo", "IdTag");

                    b.HasIndex("IdTag");

                    b.ToTable("VideoTags");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.People.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Serieses");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.View.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Librarys");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Works.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLibrary")
                        .HasColumnType("int");

                    b.Property<int>("IdSeries")
                        .HasColumnType("int");

                    b.Property<string>("PathFanart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlotOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleOriginZh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdLibrary");

                    b.HasIndex("IdSeries");

                    b.ToTable("Videos");

                    b.HasDiscriminator<string>("Type").HasValue("Video");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Works.Movie", b =>
                {
                    b.HasBaseType("Swellow.Data.SqlModel.Works.Video");

                    b.Property<string>("IdDouban")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IdDouban");

                    b.Property<string>("IdImdb")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IdImdb");

                    b.Property<string>("IdTmdb")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IdTmdb");

                    b.HasDiscriminator().HasValue("movie");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Works.Tv", b =>
                {
                    b.HasBaseType("Swellow.Data.SqlModel.Works.Video");

                    b.Property<string>("IdDouban")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IdDouban");

                    b.Property<string>("IdImdb")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IdImdb");

                    b.Property<string>("IdTmdb")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IdTmdb");

                    b.HasDiscriminator().HasValue("tv");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Episode.EpisodeMovie", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.Works.Movie", "Movie")
                        .WithMany("EpisodeMovies")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Episode.EpisodeTv", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.Works.Tv", "Tv")
                        .WithMany("EpisodeTvs")
                        .HasForeignKey("IdTv")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.LocalFile.PathDirectory", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.View.Library", "Library")
                        .WithMany("PathDirectorys")
                        .HasForeignKey("IdLibrary")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoActor", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.People.Cast", "Cast")
                        .WithMany("VideoActors")
                        .HasForeignKey("IdCast")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swellow.Data.SqlModel.Works.Video", "Video")
                        .WithMany("VideoActors")
                        .HasForeignKey("IdVideo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoDirector", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.People.Cast", "Cast")
                        .WithMany("VideoDirectors")
                        .HasForeignKey("IdCast")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swellow.Data.SqlModel.Works.Video", "Video")
                        .WithMany("VideoDirectors")
                        .HasForeignKey("IdVideo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoGenre", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.Property.Genre", "Genre")
                        .WithMany("VideoGenres")
                        .HasForeignKey("IdGenre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swellow.Data.SqlModel.Works.Video", "Video")
                        .WithMany("VideoGenres")
                        .HasForeignKey("IdVideo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoPublisher", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.Property.Publisher", "Publisher")
                        .WithMany("VideoPublishers")
                        .HasForeignKey("IdPublisher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swellow.Data.SqlModel.Works.Video", "Video")
                        .WithMany("VideoPublishers")
                        .HasForeignKey("IdVideo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoStudio", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.Property.Studio", "Studio")
                        .WithMany("VideoStudios")
                        .HasForeignKey("IdStudio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swellow.Data.SqlModel.Works.Video", "Video")
                        .WithMany("VideoStudios")
                        .HasForeignKey("IdVideo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Middle.VideoTag", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.Property.Tag", "Tag")
                        .WithMany("VideoTags")
                        .HasForeignKey("IdTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swellow.Data.SqlModel.Works.Video", "Video")
                        .WithMany("VideoTags")
                        .HasForeignKey("IdVideo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Works.Video", b =>
                {
                    b.HasOne("Swellow.Data.SqlModel.View.Library", "Library")
                        .WithMany("Videos")
                        .HasForeignKey("IdLibrary")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swellow.Data.SqlModel.Property.Series", "Series")
                        .WithMany("Videos")
                        .HasForeignKey("IdSeries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.People.Cast", b =>
                {
                    b.Navigation("VideoActors");

                    b.Navigation("VideoDirectors");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Genre", b =>
                {
                    b.Navigation("VideoGenres");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Publisher", b =>
                {
                    b.Navigation("VideoPublishers");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Series", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Studio", b =>
                {
                    b.Navigation("VideoStudios");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Property.Tag", b =>
                {
                    b.Navigation("VideoTags");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.View.Library", b =>
                {
                    b.Navigation("PathDirectorys");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Works.Video", b =>
                {
                    b.Navigation("VideoActors");

                    b.Navigation("VideoDirectors");

                    b.Navigation("VideoGenres");

                    b.Navigation("VideoPublishers");

                    b.Navigation("VideoStudios");

                    b.Navigation("VideoTags");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Works.Movie", b =>
                {
                    b.Navigation("EpisodeMovies");
                });

            modelBuilder.Entity("Swellow.Data.SqlModel.Works.Tv", b =>
                {
                    b.Navigation("EpisodeTvs");
                });
#pragma warning restore 612, 618
        }
    }
}
